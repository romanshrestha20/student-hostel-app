generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminAction {
  id         Int        @id @default(autoincrement())
  adminId    Int?
  actionType ActionType
  targetType TargetType
  targetId   Int
  reason     String?
  createdAt  DateTime   @default(now())
  User       User?      @relation(fields: [adminId], references: [id])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  studentId Int
  hostelId  Int
  createdAt DateTime @default(now())
  Hostel    Hostel   @relation(fields: [hostelId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, hostelId])
}

model Hostel {
  id          Int          @id @default(autoincrement())
  ownerId     Int
  name        String
  description String?
  address     String
  locationLat Float?
  locationLng Float?
  amenities   String[]
  status      HostelStatus @default(pending)
  createdAt   DateTime     @default(now())
  Favorite    Favorite[]
  User        User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Inquiry     Inquiry[]
  Photo       Photo[]
  Room        Room[]
}

model Inquiry {
  id        Int      @id @default(autoincrement())
  studentId Int
  hostelId  Int
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  Hostel    Hostel   @relation(fields: [hostelId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Photo {
  id       Int    @id @default(autoincrement())
  hostelId Int
  url      String
  Hostel   Hostel @relation(fields: [hostelId], references: [id], onDelete: Cascade)
}

model Room {
  id           Int     @id @default(autoincrement())
  hostelId     Int
  roomType     String
  price        Decimal @db.Decimal(10, 2)
  availability Boolean @default(true)
  Hostel       Hostel  @relation(fields: [hostelId], references: [id], onDelete: Cascade)
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  passwordHash String
  role         Role
  createdAt    DateTime      @default(now())
  AdminAction  AdminAction[]
  Favorite     Favorite[]
  Hostel       Hostel[]
  Inquiry      Inquiry[]
}

enum ActionType {
  approve
  reject
  remove
}

enum HostelStatus {
  pending
  approved
  rejected
}

enum Role {
  student
  owner
  admin
}

enum TargetType {
  hostel
  user
  photo
}
