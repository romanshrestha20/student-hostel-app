// datasource.db
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ======================
// CORE MODELS
// ======================

model User {
 id             String    @id @default(uuid())
  name           String
  email          String    @unique
  hashedPassword String
  role           Role      @default(student)
  createdAt      DateTime  @default(now())  // Add this line
  updatedAt      DateTime  @updatedAt       // Optional: add if you want tracking
  // Relations
  favorites      Favorite[]
  inquiries      Inquiry[]
  hostels        Hostel[]      @relation("HostelOwner")
  adminActions   AdminAction[]  @relation("AdminActions")
  replies Reply[]  @relation("UserReplies")
  @@index([email])
  @@index([role])
}

model Hostel {
  id            String        @id @default(uuid())
  name          String
  description   String
  address       String
  locationLat   Float
  locationLng   Float
  contactNumber String        // âœ… Add this line
  amenities     String[]
  status        HostelStatus  @default(pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  ownerId       String
  owner         User          @relation("HostelOwner", fields: [ownerId], references: [id])
  photos        Photo[]
  rooms         Room[]
  favorites     Favorite[]
  inquiries     Inquiry[]

  @@index([ownerId])
  @@index([status])
  @@index([locationLat, locationLng])
}


// ======================
// FEATURE MODELS
// ======================

model Room {
  id         String    @id @default(uuid())
  roomType   RoomType  
  price      Float
  capacity   Int
  available  Boolean   @default(true)
  amenities  String[]
  hostelId   String
  hostel     Hostel    @relation(fields: [hostelId], references: [id])
  photos     Photo[]
  favorites  Favorite[]

  @@index([hostelId])
  @@index([price])
  @@index([available])
}


model Photo {
  id        String   @id @default(uuid())
  url       String
  isPrimary Boolean  @default(false)
  hostelId  String?
  hostel    Hostel?  @relation(fields: [hostelId], references: [id])
  roomId    String?
  room      Room?    @relation(fields: [roomId], references: [id])
}

model Favorite {
  id        String   @id @default(uuid())
  studentId String
  student   User     @relation(fields: [studentId], references: [id])
  hostelId  String
  hostel    Hostel   @relation(fields: [hostelId], references: [id])
  roomId    String?   // Nullable for hostel-level favorites
  room      Room?     @relation(fields: [roomId], references: [id])
  createdAt DateTime  @default(now())

  @@unique([studentId, hostelId, roomId])
}


model Inquiry {
  id        String   @id @default(uuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  studentId String
  student   User     @relation(fields: [studentId], references: [id])
  hostelId  String
  hostel    Hostel   @relation(fields: [hostelId], references: [id])
  replies   Reply[]

  @@index([studentId])
  @@index([hostelId])
  @@index([isRead])
}

model Reply {
  id         String   @id @default(uuid())
  message    String
  createdAt  DateTime @default(now())
  inquiryId  String
  inquiry    Inquiry  @relation(fields: [inquiryId], references: [id])
  repliedById String
   repliedBy User @relation("UserReplies", fields: [repliedById], references: [id])
}

model AdminAction {
  id         String     @id @default(uuid())
  actionType ActionType
  targetType TargetType
  targetId   String
  reason     String?
  createdAt  DateTime   @default(now())

  // Relations
  adminId    String?
  admin      User?      @relation("AdminActions", fields: [adminId], references: [id])
}

// ======================
// ENUMS
// ======================

enum Role {
  student
  owner
  admin
}

enum HostelStatus {
  pending
  approved
  rejected
  suspended
}

enum RoomType {
  single
  double
  dormitory
  apartment
}

enum ActionType {
  approve_hostel
  reject_hostel
  suspend_hostel
  verify_user
  suspend_user
  delete_content
}

enum TargetType {
  hostel
  user
  photo
  review
}